<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--  加载外部配置文件  -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 开启包扫描 -->
    <context:component-scan base-package="com.play.service"/>
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--数据驱动类-->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <!--基本属性  url   user  password-->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.userName}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--配置初始化大小，最大，最小-->
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>
        <!--配置获取连接等待超时时间-->
        <property name="maxWait" value="60000"/>
        <!--配置间隔多久进行一次检测，检测需要关闭空闲连接-->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!--配置一个连接在池中最小的生存时间-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="${jdbc.testSql}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 配置监控统计拦截的filters-->
        <property name="filters" value="stat"/>
    </bean>
    <!-- 3.配置SqlSessionFactory对象   -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--  注入需要的数据源  -->
        <property name="dataSource" ref="dataSource"/>
        <!--   配置别名映射     -->
        <property name="typeAliasesPackage" value="com.play.entity"/>
        <!--   指定mybatis的核心配置文件  -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!--  4.配置mapper的映射  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.play.mapper"/>
    </bean>
    <!--  配置事务管理的实现方式  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--  开启事务注解支持  -->
    <tx:annotation-driven/>
</beans>